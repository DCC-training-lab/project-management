## Project history

Keeping track of your project history is important in many situations. If at a
later stage, you want to make sure that you understand the status quo at a
certain date, it is crucial that you kept track of your projects history
throughout its lifetime. If your project is the basis of another project that
uses it at a certain date, and you make changes in your project afterwards,
having a version number to refer to can be an easy way to make sure that the
project at this particular stage in time is fully understood.

In this section we are going to look into ways that you can keep track of your
project history using tools that you already understand. There are more
sophisticated tools out there, that we do want to recommend you look into. Using
dedicated version control software (such as Git) is easier than you may think,
and it is supported by many text editors and has several graphical interfaces as
well. Git is one of those tools that will save you so much time in the long run
and it is absolutely worth the time investment.

Let’s start with the basics though. There are two main things that are
going to be relevant if you want to keep track of your history: using version
numbers, and describing changes in a dedicated file. First you want to have a
. Second do you want to
understand how to name and release specific versions of your project.

We will start with the dedicated file where you keep track of the history. We’re
going to create this file in the root of the project. This is called the
CHANGELOG. The CHANGELOG is a single file in the root that describes important
changes you made to the project throughout its lifetime. These changes are
always accompanied by the date they were implemented. Descriptions in a change
log need not be complicated or elaborate. But they are an important reference
for changes that were made in the past, and when.

When substantial changes have been made it can be useful to release a new
version of the project. You may have seen version numbers associated to software
or other projects in the past. Version numbers usually consist of three
elements. First is the major version, then the minor version, finally a patch
number these numbers have their own meaning. The system is called semantic
versioning. Not every project follows these rules but they are useful rules to
follow, And they can be a useful reference when interpreting other projects
version numbers. When a small update is done leading to a new release, the patch
version number is updated. This can be the case if you found a bug in your
project and you fixed it. When making bigger changes, you can update the minor
version. Minor version updates are usually more substantial than a patch, but
importantly they do not break the project. This means that if you have any if
you have another project that depends on this one, that dependency will not
break. If another project uses this one, any updates will not affect how the
project functions. If this is the case, for example, if you have a software
project where names of functions change, or anything alters that could
potentially create an incompatibility with another project that uses this
project, then you will need to update the major Version. Using the number zero
is a fully legitimate way to number versions. Especially when your project is
not yet ““ ready to go “, starting with major version zero is a good way to
indicate that this is still a work in progress. It is very common for the first
functioning release to be version 0.1.0. This is usually a project that s under
development, but a version is out that is ready to be shown to the world.